{"version":3,"sources":["component/logic.js","component/ConnectFour.js","App.js","reportWebVitals.js","index.js"],"names":["search","prune","max","a","b","aiMove","grid","Promise","resolve","reject","isGameOver","best","v","moves","generateMoves","maxValue","Infinity","maxdepth","Math","round","log","length","col","m","addMove","negaMax","console","subMove","text","left","abs","depth","alpha","beta","color","result","player","checkFields","c","d","count","i","j","countThree","evaluate","value","move","pow","move_table","row","push","sort","error","winner","Cell","props","classname","className","Board","map","id","onClick","State","s","state","pnext","Menu","active","pNext","click","load","Log","show","ConnectFour","useState","createGrid","setGrid","setNext","gameState","setGame","gameActive","setActive","showLog","setShowLog","setLog","movecount","setCount","makeMove","g","p","gridCopy","slice","nGrid","r","setTimeout","then","random","handleClick","type","x","Array","fill","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7bbfaf61.chunk.js","sourcesContent":["\n\nfunction max(a, b) {\n    return a > b ? a: b;\n}\nlet search, prune;\nexport async function aiMove(grid) {\n    return new Promise(function(resolve, reject) {\n        if (isGameOver(grid) !== 0) return 0;\n        search = 0;\n        prune = 0;\n        let moves = generateMoves(grid);\n        let maxValue = -Infinity;\n        let best, v;\n        // maximum of 1000000 searches becaus moves m^depth = searches\n        let maxdepth = Math.round(Math.log(1000000) / Math.log(moves.length));\n        \n        if (moves.length === 1) resolve(moves[0].col);\n        for(let m of moves) {\n            addMove(grid, m, -1);\n            v = -negaMax(grid, maxdepth, -Infinity, Infinity, 1);\n            console.log(\"move: \"+ m.col + \"value: \" + v);\n            if (v > maxValue) {\n                best = m;\n                maxValue = v;\n            }\n            subMove(grid, m, -1);\n        }\n        let text = \" | searchdepth: \" + maxdepth + \" | analysed moves: \" \n                    + search + \" | 'skipped' moves: \" + prune;\n        \n        let left = (maxdepth - Math.abs(maxValue /1000))/2\n        if (maxValue >= 1000) text += \" | win in \" + left + (left === 1 ? \" move\" : \" moves\");\n\n        resolve([best.col, text]);\n    });\n}\n\n// alpha-beta-pruning with negaMax\nfunction negaMax(grid ,depth, alpha, beta, color) {\n    if (depth === 0 || isGameOver(grid)) {\n        return evaluate(grid, color, depth);\n    }\n\n    let moves = generateMoves(grid);\n    let value = -Infinity;\n    for (let move of moves) {\n        addMove(grid, move, color);\n        value = max(value, -negaMax(grid, depth-1, -beta, -alpha, -color))\n        alpha = max(alpha, value);\n        subMove(grid, move, color);\n\n        if (alpha >= beta) {\n            prune += (7-moves.length) * Math.pow(7, depth-1 >= 0 ? depth-1 : 0);\n            break; \n        }\n    }\n    return value;\n}\n\n\n\nfunction evaluate(grid, color, depth) {\n    search += 1;\n    let result = isGameOver(grid);\n    if (result === -1 || result === 1) return depth * 1000 * color * result;\n    if (result === 2) return 0;\n    return countThree(grid, color);\n}\n\n// returns occurrences of three cells and an empty cell in a row owned by player\nfunction countThree(grid, player) {\n    function checkFields(a, b, c, d) {\n        if ((player === a && a === b && b === c && d === null) ||\n            (player === a && a === b && c === null && b === d) ||\n            (player === a && b === null && a === c && c === d) ||\n            (null === a && a === b && b === c && d === player)) return true\n        else return false;\n    }\n\n    let count = 0;\n\n    // 0 = game running, 1 = p1 won, -1 = p2 won\n    // check rows\n    for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < grid.length; j++) {\n            if (checkFields(grid[i][j], grid[i + 1][j], grid[i + 2][j], grid[i + 3][j])) count++;\n        }\n    }\n\n    // check columns\n    for (let i = 0; i < grid[0].length; i++) {\n        for (let j = 0; j < 3; j++) {\n            if (checkFields(grid[i][j], grid[i][j + 1], grid[i][j + 2], grid[i][j + 3])) count++;\n        }\n    }\n\n    // left top -> left bottom\n    for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < 3; j++) {\n            if (checkFields(grid[i][j], grid[i + 1][j + 1], grid[i + 2][j + 2], grid[i + 3][j + 3])) count++;\n        }\n    }\n\n    // left top -> left bottom\n    for (let i = 3; i < 6; i++) {\n        for (let j = 0; j < 3; j++) {\n            if (checkFields(grid[i][j], grid[i - 1][j + 1], grid[i - 2][j + 2], grid[i - 3][j + 3])) count++;\n        }\n    }\n\n    return count;\n}\n\nconst move_table = \n    [3,4, 5, 7, 5,4,3,\n     4,6, 8,10, 8,6,4,\n     5,8,11,13,11,8,5,\n     5,8,11,13,11,8,5,\n     4,6, 8,10, 8,6,4,\n     3,4, 5, 7, 5,4,3];\nfunction generateMoves(grid) {\n    let moves = [];\n    for (let col = 0; col < 7; col++) {\n        for (let row = 6 - 1; row >= 0; row--) {\n            if (!grid[col][row]) {\n                moves.push({ col, row });\n                break;\n            }\n        }\n    }\n    // sort moves by value of move_table\n    return moves.sort((a, b) => move_table[b.row*7 + b.col] - move_table[a.row * 7 + a.col]);\n}\n\nfunction addMove(grid, move, player) {\n    if (grid[move.col][move.row]) console.error(\"Invalid move: \" + move.col + \" \" + move.row);\n    grid[move.col][move.row] = player;\n}\n\nfunction subMove(grid, move, player) {\n    if (grid[move.col][move.row] !== player) console.error(\"Invalid revert: \" + move.col + \" \" + move.row);\n    grid[move.col][move.row] = null;\n}\n\nexport function isGameOver(grid) {\n\n    function checkFields(a, b, c, d) {\n        if (a && a === b && b === c && c === d) return a;\n        else return null;\n    }\n    // check rows\n    for (let j = 0; j < 6; j++) {\n        for (let i = 0; i < 4; i++) {\n        let winner = checkFields(grid[i][j], grid[i+1][j], grid[i+2][j], grid[i+3][j]);\n        if(winner) return winner;\n        }\n    }\n    //check columns\n    for (let i = 0; i < 7; i++) {\n        for (let j = 0; j < 3; j++) {\n        let winner = checkFields(grid[i][j], grid[i][j+1], grid[i][j+2], grid[i][j+3]);\n        if (winner) return winner;\n        }\n    }\n    //diagonals top left to bottom right\n    for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < 3; j++) {\n        let winner = checkFields(grid[i][j], grid[i+1][j+1], grid[i+2][j+2], grid[i+3][j+3]);\n        if (winner) return winner;\n        }\n    }\n    //diagonals top right to bottom\n    for (let i = 3; i < 7; i++) {\n        for (let j = 0; j < 3; j++) {\n        let winner = checkFields(grid[i][j], grid[i-1][j+1], grid[i-2][j+2], grid[i-3][j+3]);\n        if (winner) return winner; \n        }\n    }\n\n    for (let i = 0; i < 7; i++)\n        if(!grid[i][0]) return 0;\n    \n    return 2;\n}","import '../style/connectFour.css';\r\nimport { useState } from 'react';\r\nimport { aiMove , isGameOver} from './logic';\r\n\r\n// npm run deploy\r\n// npm start\r\n\r\nfunction Cell(props) {\r\n  let classname;\r\n  if (props.value === 1) classname = 'p1';\r\n  else if (props.value === -1) classname = 'p2';\r\n\r\n  return (\r\n      <div>\r\n        <div className={'cell'}><div className={classname}></div>\r\n      </div></div>\r\n        \r\n  )\r\n}\r\n\r\nfunction Board(props) {\r\n  return (\r\n      <div className={\"board\"}>\r\n          {props.grid.map((col, i) => \r\n              <div className={\"column-box\"} key ={\"col\" + i}>\r\n                <div key={i} id={`col-${i}`} className={\"col\"} >\r\n                    {col.map((value, j) => <Cell key={j} value={value}/>)}\r\n                </div>\r\n                <div key={i+\"rand\"} className={\"col-border\"} \r\n                  onClick={() => props.onClick(i)}\r\n                >\r\n                  {col.map((value, j) => <div key={j} className={\"cell-border\"}/>)}\r\n\r\n                </div>\r\n              </div>\r\n          )}\r\n      </div>\r\n  )\r\n}\r\n\r\nfunction State(props) {\r\n  let text ='';\r\n  const s = props.state\r\n  \r\n  if (s ===  1) text = 'you have won! this must be a bug...';\r\n  if (s === -1) text = 'the computer has won.';\r\n  if (s ===  2) text = 'the game is a draw.';\r\n  if (s ===  0)  text = props.pnext ? 'your turn. click a column.' : 'the computer is thinking.';\r\n\r\n  return <p>{text}</p>\r\n}\r\n\r\nfunction Menu(props) {\r\n  const active = props.active;\r\n  const state = props.state;\r\n  const pnext = props.pNext;\r\n  const click = props.click;\r\n\r\n  let load = null;\r\n  if (active && state === 0 && !pnext)\r\n    load = <div className=\"load\"></div>;\r\n\r\n  return (<div className={\"menu\"}>\r\n              <button className=\"game-button\" onClick={click}>{active ? 'reset' : 'start game'}</button>\r\n              {load}\r\n              <State state={state} pnext ={pnext}/>\r\n          </div>)\r\n}\r\n\r\nfunction Log(props) {\r\n  if (props.show) {\r\n    return (<div className={\"log\"}>\r\n              <p>{props.log}</p>\r\n            </div>)\r\n  }\r\n  else return null;\r\n}\r\n\r\nexport default function ConnectFour(props) {\r\n    const [grid, setGrid] = useState( createGrid() );\r\n    const [pNext, setNext] = useState( true );\r\n    const [gameState, setGame] = useState(0);\r\n    const [gameActive, setActive] = useState(false);\r\n    const [showLog, setShowLog] = useState(false);\r\n    const [log, setLog] = useState('>');\r\n    const [movecount, setCount] = useState(1);\r\n\r\n    function makeMove(i, g, p) {\r\n      if (g[i][0] || isGameOver(g)) {\r\n        console.log(\"col full\");\r\n        \r\n        return null;\r\n      }\r\n      let gridCopy = [];\r\n      for (let j = 0; j < g.length; j++)\r\n        gridCopy[j] = g[j].slice();\r\n\r\n\r\n      let row = 6;\r\n      for( let j = 0; j < 6; j++) {\r\n        if(gridCopy[i][j]) {\r\n          row = j;\r\n          break;\r\n        }\r\n      }\r\n      gridCopy[i][row-1] = p ? 1 : -1;\r\n      \r\n      setGame(isGameOver(gridCopy));\r\n      setGrid(gridCopy)\r\n      return gridCopy;\r\n    }\r\n\r\n    async function handleClick(i) {\r\n      if( gameActive && gameState === 0 && pNext) {\r\n        setNext(false);\r\n        let nGrid = makeMove(i, grid, true);\r\n        if (!nGrid) {\r\n          setNext(true);\r\n          return;\r\n        }\r\n        let gridCopy = [];\r\n        for (let j = 0; j < nGrid.length; j++)\r\n          gridCopy[j] = nGrid[j].slice();\r\n        await new Promise(r => setTimeout(r, 550));\r\n        aiMove(gridCopy).then(\r\n            result => {\r\n              makeMove(result[0], gridCopy, false);\r\n              setLog(\"> move: \" + movecount + result[1]);\r\n              setCount(movecount + 1);\r\n              setNext(true);\r\n            }\r\n        )\r\n\r\n      }\r\n    }\r\n    \r\n    function handleLogClick() {\r\n      if (showLog) console.log(\"log deactivated\");\r\n      else console.log(\"log activated\");\r\n      setShowLog(!showLog);\r\n    }\r\n\r\n    function handleResetClick() {\r\n      \r\n      if (gameActive) {   \r\n        setGrid(createGrid());\r\n        setGame(0);\r\n        setActive(false);\r\n        setCount(0);\r\n        setLog('');\r\n      }\r\n      else {\r\n        setActive(true);\r\n        if (Math.random() < 0.5) {\r\n          setNext(true);\r\n        }\r\n        else {\r\n          setNext(false);\r\n          makeMove(3, createGrid(), false);\r\n          setLog(\"> move: 1 | no moves to analyze\");\r\n          setCount(2);\r\n          setNext(true);\r\n        }\r\n      }\r\n    }\r\n\r\n    return (\r\n        <div className={\"connect-four\"}>\r\n          <div className={\"header\"}>\r\n            <h1>CONNECT FOUR AI</h1>\r\n            <h2>made by jannis becketepe and timon kobusch.</h2>\r\n          </div>\r\n         \r\n          <Menu\r\n            active ={gameActive}\r\n            state = {gameState}\r\n            pNext = {pNext}\r\n            click = {() => handleResetClick()}\r\n          />\r\n            \r\n          <Board \r\n              grid={grid}\r\n              onClick={i => handleClick(i)}\r\n          />\r\n          <div className={\"log-switch\"} >\r\n            <label className={\"switch\"}>\r\n              <input type=\"checkbox\" onClick={() => handleLogClick()}/>\r\n              <span className={\"slider round\"}></span>\r\n            </label>\r\n            <p>show log</p>\r\n          </div>\r\n          <Log show ={showLog} log={log}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction createGrid() {\r\n    let x = new Array(7);\r\n    for(let i = 0; i < x.length; i++) {\r\n      x[i] = new Array(6).fill(null);\r\n    }\r\n    return x;\r\n}\r\n/* \r\nfunction checkFields(a, b, c, d) {\r\n  if (a && a === b && b === c && c === d) {\r\n    return a;\r\n  }\r\n  return null;\r\n}\r\n*/","import './App.css';\nimport ConnectFour from './component/ConnectFour';\n\nfunction App() {\n  return (\n    <ConnectFour />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}