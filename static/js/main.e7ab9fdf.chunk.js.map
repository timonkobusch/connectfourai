{"version":3,"sources":["component/ConnectFour.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","props","classname","value","className","Board","grid","map","col","i","onClick","j","ConnectFour","useState","createGrid","setGrid","pNext","setNext","gameState","setGame","makeMove","g","p","gameOver","gridCopy","length","slice","row","console","log","e","preventDefault","nGrid","handleClick","x","Array","fill","checkFields","a","b","c","d","winner","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e7ab9fdf.chunk.js","sourcesContent":["import '../style/connectFour.css';\r\nimport { useState } from 'react';\r\n\r\nfunction aiMove(grid) {\r\n  \r\n  return 1;\r\n}\r\n\r\nfunction Cell(props) {\r\n  let classname = 'cell ';\r\n  if (props.value === 1) classname += 'p1';\r\n  else if (props.value === -1) classname += 'p2';\r\n  else classname += 'empty';\r\n\r\n  return (\r\n      <div className={classname}></div>\r\n  )\r\n}\r\n\r\nfunction Board(props) {\r\n  return (\r\n      <div className={\"board\"}>\r\n          {props.grid.map((col, i) => \r\n              <div key={i} className={\"col\"} onClick={() => props.onClick(i)}>\r\n                  {col.map((value, j) => <Cell key={j} value={value}/>)}\r\n              </div>\r\n          )}\r\n      </div>\r\n  )\r\n}\r\n\r\n\r\nexport default function ConnectFour(props) {\r\n    const [grid, setGrid] = useState( createGrid() );\r\n    const [pNext, setNext] = useState( true );\r\n    const [gameState, setGame] = useState(0);\r\n\r\n\r\n    function makeMove(i, g, p) {\r\n      if (g[i][0] || gameOver(g)) {\r\n        console.log(\"col full\");\r\n        \r\n        return;\r\n      }\r\n      let gridCopy = [];\r\n      for (let j = 0; j < g.length; j++)\r\n        gridCopy[j] = g[j].slice();\r\n\r\n\r\n      let row = -1;\r\n      for( let j = 0; j < 6; j++) {\r\n        if(gridCopy[i][j]) {\r\n          row = j;\r\n          break;\r\n        }\r\n      }\r\n      if( row === -1 ) gridCopy[i][5] = p ? 1 : -1;\r\n      else gridCopy[i][row-1] = p ? 1 : -1;\r\n      \r\n      console.log(\"move at\" + i + row);\r\n      setGrid(gridCopy);\r\n      setGame(gameOver(gridCopy));\r\n      return gridCopy;\r\n    }\r\n\r\n    function handleClick(i) {\r\n      if( gameState === 0 && pNext) {\r\n        setNext(false);\r\n        let nGrid = makeMove(i, grid, true);\r\n        let move = aiMove(nGrid);\r\n        makeMove(move, nGrid, false);\r\n        setNext(true);\r\n\r\n      }\r\n    }\r\n    \r\n    function handleResetClick(e) {\r\n      e.preventDefault();\r\n      setGrid(createGrid());\r\n      setGame(0);\r\n      setNext(true);\r\n    }\r\n\r\n    return (\r\n      <div className={\"ConnectFour\"}>\r\n        <div className={\"menu\"}>\r\n            <h1>ConnectFour</h1>\r\n            <p>{pNext ? 'Your turn' : 'Computers turn'}</p>\r\n            <p>game state: {gameState}</p>\r\n            <button onClick={handleResetClick}>reset</button>\r\n        </div>\r\n        <Board \r\n            grid={grid}\r\n            onClick={i => handleClick(i)}\r\n        />\r\n      </div>\r\n    );\r\n}\r\n\r\nfunction createGrid() {\r\n    let x = new Array(7);\r\n    for(let i = 0; i < x.length; i++) {\r\n      x[i] = new Array(6).fill(null);\r\n    }\r\n    return x;\r\n}\r\n\r\nfunction checkFields(a, b, c, d) {\r\n  if (a && a === b && b === c && c === d) {\r\n    return a;\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction gameOver(grid) {\r\n  // check rows\r\n  for (let j = 0; j < 6; j++) {\r\n    for (let i = 0; i < 4; i++) {\r\n      let winner = checkFields(grid[i][j], grid[i+1][j], grid[i+2][j], grid[i+3][j]);\r\n      if(winner) return winner;\r\n    }\r\n  }\r\n\r\n  //check columns\r\n  for (let i = 0; i < 7; i++) {\r\n    for (let j = 0; j < 3; j++) {\r\n      let winner = checkFields(grid[i][j], grid[i][j+1], grid[i][j+2], grid[i][j+3]);\r\n      if (winner) return winner;\r\n    }\r\n  }\r\n\r\n  //diagonals top left to bottom right\r\n  for (let i = 0; i < 4; i++) {\r\n    for (let j = 0; j < 3; j++) {\r\n      let winner = checkFields(grid[i][j], grid[i+1][j+1], grid[i+2][j+2], grid[i+3][j+3]);\r\n      if (winner) return winner;\r\n    }\r\n  }\r\n\r\n  //diagonals top right to bottom\r\n  for (let i = 3; i < 7; i++) {\r\n    for (let j = 0; j < 3; j++) {\r\n      let winner = checkFields(grid[i][j], grid[i-1][j+1], grid[i-2][j+2], grid[i-3][j+3]);\r\n      if (winner) return winner; \r\n    }\r\n  }\r\n  return 0;\r\n}\r\n","import './App.css';\nimport ConnectFour from './component/ConnectFour';\n\nfunction App() {\n  return (\n    <ConnectFour />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}