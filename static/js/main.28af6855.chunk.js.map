{"version":3,"sources":["component/logic.js","component/ConnectFour.js","App.js","reportWebVitals.js","index.js"],"names":["max","a","b","aiMove","grid","Promise","resolve","reject","isGameOver","best","v","moves","generateMoves","maxValue","Infinity","maxdepth","Math","round","log","length","col","m","addMove","negaMax","console","subMove","depth","alpha","beta","color","result","player","checkFields","c","d","count","i","j","countThree","evaluate","value","move","move_table","row","push","sort","error","winner","Cell","props","classname","className","Board","map","id","onClick","State","text","s","state","pnext","Menu","active","pNext","click","load","ConnectFour","useState","createGrid","setGrid","setNext","gameState","setGame","gameActive","setActive","makeMove","g","p","gridCopy","slice","nGrid","r","setTimeout","then","random","handleClick","type","x","Array","fill","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.28af6855.chunk.js","sourcesContent":["\n\nfunction max(a, b) {\n    return a > b ? a: b;\n}\n\nexport async function aiMove(grid) {\n    return new Promise(function(resolve, reject) {\n        if (isGameOver(grid) !== 0) return 0;\n        let moves = generateMoves(grid);\n        let maxValue = -Infinity;\n        let best, v;\n        \n        // maximum of 1000000 searches becaus moves m^depth = searches\n        let maxdepth = Math.round(Math.log(1000000) / Math.log(moves.length));\n        if (moves.length === 1) resolve(moves[0].col);\n        for(let m of moves) {\n            addMove(grid, m, -1);\n            v = -negaMax(grid, maxdepth, -Infinity, Infinity, 1);\n            console.log(\"move: \"+ m.col + \"value: \" + v);\n            if (v > maxValue) {\n                best = m;\n                maxValue = v;\n            }\n            subMove(grid, m, -1);\n        }\n        resolve(best.col);\n    });\n}\n\n// alpha-beta-pruning with negaMax\nfunction negaMax(grid ,depth, alpha, beta, color) {\n    if (depth === 0 || isGameOver(grid))\n        return evaluate(grid, color, depth);\n\n    let moves = generateMoves(grid);\n    let value = -Infinity;\n    for (let move of moves) {\n        addMove(grid, move, color);\n        value = max(value, -negaMax(grid, depth-1, -beta, -alpha, -color))\n        alpha = max(alpha, value);\n        subMove(grid, move, color);\n\n        if (alpha >= beta) break;\n    }\n    return value;\n}\n\n\n\nfunction evaluate(grid, color, depth) {\n    let result = isGameOver(grid);\n    if (result === -1 || result === 1) return depth * 1000 * color * result;\n    if (result === 2) return 0;\n    return countThree(grid, color);\n}\n\n// returns occurrences of three cells and an empty cell in a row owned by player\nfunction countThree(grid, player) {\n    function checkFields(a, b, c, d) {\n        if ((player === a && a === b && b === c && d === null) ||\n            (player === a && a === b && c === null && b === d) ||\n            (player === a && b === null && a === c && c === d) ||\n            (null === a && a === b && b === c && d === player)) return true\n        else return false;\n    }\n\n    let count = 0;\n\n    // 0 = game running, 1 = p1 won, -1 = p2 won\n    // check rows\n    for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < grid.length; j++) {\n            if (checkFields(grid[i][j], grid[i + 1][j], grid[i + 2][j], grid[i + 3][j])) count++;\n        }\n    }\n\n    // check columns\n    for (let i = 0; i < grid[0].length; i++) {\n        for (let j = 0; j < 3; j++) {\n            if (checkFields(grid[i][j], grid[i][j + 1], grid[i][j + 2], grid[i][j + 3])) count++;\n        }\n    }\n\n    // left top -> left bottom\n    for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < 3; j++) {\n            if (checkFields(grid[i][j], grid[i + 1][j + 1], grid[i + 2][j + 2], grid[i + 3][j + 3])) count++;\n        }\n    }\n\n    // left top -> left bottom\n    for (let i = 3; i < 6; i++) {\n        for (let j = 0; j < 3; j++) {\n            if (checkFields(grid[i][j], grid[i - 1][j + 1], grid[i - 2][j + 2], grid[i - 3][j + 3])) count++;\n        }\n    }\n\n    return count;\n}\n\nconst move_table = \n    [3,4, 5, 7, 5,4,3,\n     4,6, 8,10, 8,6,4,\n     5,8,11,13,11,8,5,\n     5,8,11,13,11,8,5,\n     4,6, 8,10, 8,6,4,\n     3,4, 5, 7, 5,4,3];\nfunction generateMoves(grid) {\n    let moves = [];\n    for (let col = 0; col < 7; col++) {\n        for (let row = 6 - 1; row >= 0; row--) {\n            if (!grid[col][row]) {\n                moves.push({ col, row });\n                break;\n            }\n        }\n    }\n    // sort moves by value of move_table\n    return moves.sort((a, b) => move_table[b.row*7 + b.col] - move_table[a.row * 7 + a.col]);\n}\n\nfunction addMove(grid, move, player) {\n    if (grid[move.col][move.row]) console.error(\"Invalid move: \" + move.col + \" \" + move.row);\n    grid[move.col][move.row] = player;\n}\n\nfunction subMove(grid, move, player) {\n    if (grid[move.col][move.row] !== player) console.error(\"Invalid revert: \" + move.col + \" \" + move.row);\n    grid[move.col][move.row] = null;\n}\n\nexport function isGameOver(grid) {\n\n    function checkFields(a, b, c, d) {\n        if (a && a === b && b === c && c === d) return a;\n        else return null;\n    }\n    // check rows\n    for (let j = 0; j < 6; j++) {\n        for (let i = 0; i < 4; i++) {\n        let winner = checkFields(grid[i][j], grid[i+1][j], grid[i+2][j], grid[i+3][j]);\n        if(winner) return winner;\n        }\n    }\n    //check columns\n    for (let i = 0; i < 7; i++) {\n        for (let j = 0; j < 3; j++) {\n        let winner = checkFields(grid[i][j], grid[i][j+1], grid[i][j+2], grid[i][j+3]);\n        if (winner) return winner;\n        }\n    }\n    //diagonals top left to bottom right\n    for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < 3; j++) {\n        let winner = checkFields(grid[i][j], grid[i+1][j+1], grid[i+2][j+2], grid[i+3][j+3]);\n        if (winner) return winner;\n        }\n    }\n    //diagonals top right to bottom\n    for (let i = 3; i < 7; i++) {\n        for (let j = 0; j < 3; j++) {\n        let winner = checkFields(grid[i][j], grid[i-1][j+1], grid[i-2][j+2], grid[i-3][j+3]);\n        if (winner) return winner; \n        }\n    }\n\n    for (let i = 0; i < 7; i++)\n        if(!grid[i][0]) return 0;\n    \n    return 2;\n}","import '../style/connectFour.css';\r\nimport { useState } from 'react';\r\nimport { aiMove , isGameOver} from './logic';\r\n\r\n// npm run deploy\r\n// npm start\r\n\r\nfunction Cell(props) {\r\n  let classname;\r\n  if (props.value === 1) classname = 'p1';\r\n  else if (props.value === -1) classname = 'p2';\r\n\r\n  return (\r\n      <div>\r\n        <div className={'cell'}><div className={classname}></div>\r\n      </div></div>\r\n        \r\n  )\r\n}\r\n\r\nfunction Board(props) {\r\n  return (\r\n      <div className={\"board\"}>\r\n          {props.grid.map((col, i) => \r\n              <div className={\"column-box\"} key ={\"col\" + i}>\r\n                <div key={i} id={`col-${i}`} className={\"col\"} >\r\n                    {col.map((value, j) => <Cell key={j} value={value}/>)}\r\n                </div>\r\n                <div key={i+\"rand\"} className={\"col-border\"} \r\n                  onClick={() => props.onClick(i)}\r\n                >\r\n                  {col.map((value, j) => <div key={j} className={\"cell-border\"}/>)}\r\n\r\n                </div>\r\n              </div>\r\n          )}\r\n      </div>\r\n  )\r\n}\r\n\r\nfunction State(props) {\r\n  let text ='';\r\n  const s = props.state\r\n  \r\n  if (s ===  1) text = 'you have won! this must be a bug...';\r\n  if (s === -1) text = 'the computer has won.';\r\n  if (s ===  2) text = 'the game is a draw.';\r\n  if (s ===  0)  text = props.pnext ? 'your turn. click a column.' : 'the computer is thinking.';\r\n\r\n  return <p>{text}</p>\r\n}\r\n\r\nfunction Menu(props) {\r\n  const active = props.active;\r\n  const state = props.state;\r\n  const pnext = props.pNext;\r\n  const click = props.click;\r\n\r\n  let load = null;\r\n  if (active && state === 0 && !pnext)\r\n    load = <div className=\"load\"></div>;\r\n\r\n  return (<div className={\"menu\"}>\r\n              <button className=\"game-button\" onClick={click}>{active ? 'reset' : 'start game'}</button>\r\n              {load}\r\n              <State state={state} pnext ={pnext}/>\r\n          </div>)\r\n}\r\n\r\nexport default function ConnectFour(props) {\r\n    const [grid, setGrid] = useState( createGrid() );\r\n    const [pNext, setNext] = useState( true );\r\n    const [gameState, setGame] = useState(0);\r\n    const [gameActive, setActive] = useState(false);\r\n\r\n    function makeMove(i, g, p) {\r\n      if (g[i][0] || isGameOver(g)) {\r\n        console.log(\"col full\");\r\n        \r\n        return null;\r\n      }\r\n      let gridCopy = [];\r\n      for (let j = 0; j < g.length; j++)\r\n        gridCopy[j] = g[j].slice();\r\n\r\n\r\n      let row = 6;\r\n      for( let j = 0; j < 6; j++) {\r\n        if(gridCopy[i][j]) {\r\n          row = j;\r\n          break;\r\n        }\r\n      }\r\n      gridCopy[i][row-1] = p ? 1 : -1;\r\n      \r\n      setGame(isGameOver(gridCopy));\r\n      setGrid(gridCopy)\r\n      return gridCopy;\r\n    }\r\n\r\n    async function handleClick(i) {\r\n      if( gameActive && gameState === 0 && pNext) {\r\n        setNext(false);\r\n        let nGrid = makeMove(i, grid, true);\r\n        if (!nGrid) {\r\n          setNext(true);\r\n          return;\r\n        }\r\n        let gridCopy = [];\r\n        for (let j = 0; j < nGrid.length; j++)\r\n          gridCopy[j] = nGrid[j].slice();\r\n        await new Promise(r => setTimeout(r, 550));\r\n        aiMove(gridCopy).then(\r\n            result => {\r\n              makeMove(result, gridCopy, false);\r\n              setNext(true);\r\n            }\r\n        )\r\n\r\n      }\r\n    }\r\n    \r\n    function handleResetClick() {\r\n      \r\n      if (gameActive) {   \r\n        setGrid(createGrid());\r\n        setGame(0);\r\n        setActive(false);\r\n      }\r\n      else {\r\n        setActive(true);\r\n        if (Math.random() < 0.5) {\r\n          setNext(true);\r\n        }\r\n        else {\r\n          setNext(false);\r\n          makeMove(3, createGrid(), false);\r\n          setNext(true);\r\n        }\r\n      }\r\n    }\r\n\r\n    return (\r\n        <div className={\"connect-four\"}>\r\n          <div className={\"header\"}>\r\n            <h1>CONNECT FOUR AI</h1>\r\n            <h2>made by jannis becketepe and timon kobusch.</h2>\r\n          </div>\r\n         \r\n          <Menu\r\n            active ={gameActive}\r\n            state = {gameState}\r\n            pNext = {pNext}\r\n            click = {() => handleResetClick()}\r\n          />\r\n            \r\n          <Board \r\n              grid={grid}\r\n              onClick={i => handleClick(i)}\r\n          />\r\n          <div className={\"log-switch\"}>\r\n            <label className={\"switch\"}>\r\n              <input type=\"checkbox\"/>\r\n              <span className={\"slider round\"}></span>\r\n            </label>\r\n          </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction createGrid() {\r\n    let x = new Array(7);\r\n    for(let i = 0; i < x.length; i++) {\r\n      x[i] = new Array(6).fill(null);\r\n    }\r\n    return x;\r\n}\r\n/* \r\nfunction checkFields(a, b, c, d) {\r\n  if (a && a === b && b === c && c === d) {\r\n    return a;\r\n  }\r\n  return null;\r\n}\r\n*/","import './App.css';\nimport ConnectFour from './component/ConnectFour';\n\nfunction App() {\n  return (\n    <ConnectFour />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}