{"version":3,"sources":["component/logic.js","component/ConnectFour.js","App.js","reportWebVitals.js","index.js"],"names":["aiMove","g","a","Promise","resolve","reject","isGameOver","moves","generateMoves","m","makeMove","grid","col","row","push","sort","b","Math","abs","move","player","console","error","checkFields","c","d","i","j","length","winner","Cell","props","classname","value","className","Board","map","id","onClick","ConnectFour","useState","createGrid","setGrid","pNext","setNext","gameState","setGame","gameActive","setActive","p","gameOver","gridCopy","slice","log","r","ceil","random","nGrid","setTimeout","then","result","e","preventDefault","handleClick","x","Array","fill","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8bed520b.chunk.js","sourcesContent":["const MAXDEPTH = 10;\n\nfunction max(a, b) {\n    return a > b ? a : b;\n}\n\nexport async function aiMove(g) {\n    return new Promise(function(resolve, reject) {\n        if (isGameOver(g)) return 0;\n        let moves = generateMoves(g);\n        for(let m of moves) {\n            makeMove(g, m, -1);\n            \n        }\n        //let value = negaMax(g, 1, MAXDEPTH, -Infinity, Infinity);\n\n        resolve(1);\n    });\n}\n\n// alpha-beta-pruning with negaMax\nfunction negaMax(grid, player, depth, alpha, beta) {\n    let bestMove;\n    if (depth === 0 || endPosition(grid))\n        return value(grid, player);\n    let maxVal = alpha;\n    let moves = generateMoves(grid);\n    for (let move of moves) {\n        makeMove(grid, move, player);\n        let val = -negaMax(grid, -player, depth - 1, -beta, -maxVal);\n        revertMove(grid, move, player);\n        if (val > maxVal) {\n            maxVal = val;\n            if (depth === MAXDEPTH)\n                bestMove = { ...move};\n            if (maxVal >= beta)\n                break;\n        }\n    }\n    return maxVal;\n}\n\nfunction endPosition(grid) {\n\n}\n\nfunction value(grid, player) {\n    if (isGameOver(grid) === player) return 1000;\n\n    return countThree(grid, player);\n}\n\n// returns occurrences of three cells and an empty cell in a row owned by player\nfunction countThree(grid, player) {\n    function checkFields(a, b, c, d) {\n        if ((player === a && a === b && b === c && d === null) ||\n            (player === a && a === b && c === null && b === d) ||\n            (player === a && b === null && a === c && c === d) ||\n            (null === a && a === b && b === c && d === player)) return true\n        else return false;\n    }\n\n    let count = 0;\n\n    // 0 = game running, 1 = p1 won, -1 = p2 won\n    // check rows\n    for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < grid.length; j++) {\n            if (checkFields(grid[i][j], grid[i + 1][j], grid[i + 2][j], grid[i + 3][j])) count++;\n        }\n    }\n\n    // check columns\n    for (let i = 0; i < grid[0].length; i++) {\n        for (let j = 0; j < 3; j++) {\n            if (checkFields(grid[i][j], grid[i][j + 1], grid[i][j + 2], grid[i][j + 3])) count++;\n        }\n    }\n\n    // left top -> left bottom\n    for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < 3; j++) {\n            if (checkFields(grid[i][j], grid[i + 1][j + 1], grid[i + 2][j + 2], grid[i + 3][j + 3])) count++;\n        }\n    }\n\n    // left top -> left bottom\n    for (let i = 3; i < 6; i++) {\n        for (let j = 0; j < 3; j++) {\n            if (checkFields(grid[i][j], grid[i - 1][j + 1], grid[i - 2][j + 2], grid[i - 3][j + 3])) count++;\n        }\n    }\n\n    return count;\n}\n\nfunction noMoreMoves(grid) {\n    for (let j = 0; j < grid.length; j++) {\n        if (grid[0][j] === null) return false;\n    }\n    return true;\n}\n\nfunction generateMoves(grid) {\n    let moves = [];\n    for (let col = 0; col < 7; col++) {\n        for (let row = 6 - 1; row >= 0; row--) {\n            if (!grid[col][row]) {\n                moves.push({ col, row });\n                break;\n            }\n        }\n    }\n    // sort moves by distance to the middle column\n    return moves.sort((a, b) => Math.abs(3 - a.col) - Math.abs(3 - b.col));\n}\n\nfunction makeMove(grid, move, player) {\n    if (grid[move.col][move.row]) console.error(\"Invalid move: \" + move.col + \" \" + move.row);\n    grid[move.col][move.row] = player;\n}\n\nfunction revertMove(grid, move, player) {\n    if (grid[move.col][move.row] !== player) console.error(\"Invalid revert: \" + move.col + \" \" + move.row);\n    grid[move.col][move.row] = null;\n}\n\nexport function isGameOver(grid) {\n    function checkFields(a, b, c, d) {\n        if (a && a === b && b === c && c === d) return a;\n        else return null;\n    }\n\n    // 0 = game running, 1 = p1 won, -1 = p2 won\n    // check rows\n    for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < grid.length; j++) {\n            let winner = checkFields(grid[i][j], grid[i + 1][j], grid[i + 2][j], grid[i + 3][j]);\n            if (winner)\n                return winner;\n        }\n    }\n\n    // check columns\n    for (let i = 0; i < grid[0].length; i++) {\n        for (let j = 0; j < 3; j++) {\n            let winner = checkFields(grid[i][j], grid[i][j + 1], grid[i][j + 2], grid[i][j + 3]);\n            if (winner)\n                return winner;\n        }\n    }\n\n    // left top -> left bottom\n    for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < 3; j++) {\n            let winner = checkFields(grid[i][j], grid[i + 1][j + 1], grid[i + 2][j + 2], grid[i + 3][j + 3]);\n            if (winner)\n                return winner;\n        }\n    }\n\n    // left top -> left bottom\n    for (let i = 3; i < 6; i++) {\n        for (let j = 0; j < 3; j++) {\n            let winner = checkFields(grid[i][j], grid[i - 1][j + 1], grid[i - 2][j + 2], grid[i - 3][j + 3]);\n            if (winner)\n                return winner;\n        }\n    }\n\n    return 0;\n}","import '../style/connectFour.css';\r\nimport { useState } from 'react';\r\nimport { aiMove } from './logic';\r\n\r\n// npm run deploy\r\n// npm start\r\n\r\nfunction Cell(props) {\r\n  let classname;\r\n  if (props.value === 1) classname = 'p1';\r\n  else if (props.value === -1) classname = 'p2';\r\n\r\n  return (\r\n      <div>\r\n        <div className={'cell'}><div className={classname}></div>\r\n      </div></div>\r\n        \r\n  )\r\n}\r\n\r\nfunction Board(props) {\r\n  return (\r\n      <div className={\"board\"}>\r\n          {props.grid.map((col, i) => \r\n              <div className={\"column-box\"}>\r\n                <div key={i} id={`col-${i}`} className={\"col\"} >\r\n                    {col.map((value, j) => <Cell key={j} value={value}/>)}\r\n                </div>\r\n                <div key={i+\"rand\"} className={\"col-border\"} \r\n                  onClick={() => props.onClick(i)}\r\n                >\r\n                  {col.map((value, j) => <div key={j} className={\"cell-border\"}/>)}\r\n\r\n                </div>\r\n              </div>\r\n          )}\r\n      </div>\r\n  )\r\n}\r\n\r\n\r\nexport default function ConnectFour(props) {\r\n    const [grid, setGrid] = useState( createGrid() );\r\n    const [pNext, setNext] = useState( true );\r\n    const [gameState, setGame] = useState(0);\r\n    const [gameActive, setActive] = useState(false);\r\n\r\n    function makeMove(i, g, p) {\r\n      if (g[i][0] || gameOver(g)) {\r\n        console.log(\"col full\");\r\n        \r\n        return;\r\n      }\r\n      let gridCopy = [];\r\n      for (let j = 0; j < g.length; j++)\r\n        gridCopy[j] = g[j].slice();\r\n\r\n\r\n      let row = 6;\r\n      for( let j = 0; j < 6; j++) {\r\n        if(gridCopy[i][j]) {\r\n          row = j;\r\n          break;\r\n        }\r\n      }\r\n      gridCopy[i][row-1] = p ? 1 : -1;\r\n      \r\n      console.log(\"move at\" + i + row);\r\n      setGame(gameOver(gridCopy));\r\n      setGrid(gridCopy)\r\n      return gridCopy;\r\n    }\r\n\r\n    async function handleClick(i) {\r\n      if( gameActive && gameState === 0 && pNext) {\r\n        setNext(false);\r\n        let r = Math.ceil(Math.random()*7);\r\n        console.log(r);\r\n        let nGrid = makeMove(i, grid, true);\r\n        let gridCopy = [];\r\n        for (let j = 0; j < nGrid.length; j++)\r\n          gridCopy[j] = nGrid[j].slice();\r\n        await new Promise(r => setTimeout(r, 550));\r\n        aiMove(gridCopy).then(\r\n            result => {\r\n              makeMove(result, nGrid, false);\r\n              setNext(true);\r\n            }\r\n        )\r\n\r\n      }\r\n    }\r\n    \r\n    function handleResetClick(e) {\r\n      \r\n      e.preventDefault();\r\n      if (gameActive) {   \r\n        setGrid(createGrid());\r\n        setGame(0);\r\n        setActive(false);\r\n      }\r\n      else {\r\n        setActive(true);\r\n        if (Math.random() < 0.5) {\r\n          setNext(true);\r\n        }\r\n        else {\r\n          setNext(false);\r\n          aiMove(createGrid()).then(\r\n            result => {\r\n              makeMove(result, createGrid(), false);\r\n              setNext(true);\r\n            });\r\n        }\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className={\"background\"}>\r\n        <div className={\"connect-four\"}>\r\n          <div className={\"header\"}>\r\n            <h1>CONNECT FOUR AI</h1>\r\n            <h2>made by jannis becketepe and timon kobusch.</h2>\r\n          </div>\r\n          <div className={\"menu\"}>\r\n            <button className=\"game-button\" onClick={handleResetClick}>{gameActive ? 'reset' : 'start game'}</button>\r\n            {gameActive && gameState===0 && !pNext && <div className=\"load\"></div>}\r\n            <p>{gameActive && gameState === 0 ? pNext ? 'your turn. click a column.' : 'the computer is thinking.' : ''}</p>\r\n            <p>{gameState === 1 ? 'You won' : gameState === -1 ? 'the computer won.' : ''}</p>\r\n          </div>\r\n          <Board \r\n              grid={grid}\r\n              onClick={i => handleClick(i)}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nfunction createGrid() {\r\n    let x = new Array(7);\r\n    for(let i = 0; i < x.length; i++) {\r\n      x[i] = new Array(6).fill(null);\r\n    }\r\n    return x;\r\n}\r\n\r\nfunction checkFields(a, b, c, d) {\r\n  if (a && a === b && b === c && c === d) {\r\n    return a;\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction gameOver(grid) {\r\n  // check rows\r\n  for (let j = 0; j < 6; j++) {\r\n    for (let i = 0; i < 4; i++) {\r\n      let winner = checkFields(grid[i][j], grid[i+1][j], grid[i+2][j], grid[i+3][j]);\r\n      if(winner) return winner;\r\n    }\r\n  }\r\n\r\n  //check columns\r\n  for (let i = 0; i < 7; i++) {\r\n    for (let j = 0; j < 3; j++) {\r\n      let winner = checkFields(grid[i][j], grid[i][j+1], grid[i][j+2], grid[i][j+3]);\r\n      if (winner) return winner;\r\n    }\r\n  }\r\n\r\n  //diagonals top left to bottom right\r\n  for (let i = 0; i < 4; i++) {\r\n    for (let j = 0; j < 3; j++) {\r\n      let winner = checkFields(grid[i][j], grid[i+1][j+1], grid[i+2][j+2], grid[i+3][j+3]);\r\n      if (winner) return winner;\r\n    }\r\n  }\r\n\r\n  //diagonals top right to bottom\r\n  for (let i = 3; i < 7; i++) {\r\n    for (let j = 0; j < 3; j++) {\r\n      let winner = checkFields(grid[i][j], grid[i-1][j+1], grid[i-2][j+2], grid[i-3][j+3]);\r\n      if (winner) return winner; \r\n    }\r\n  }\r\n  return 0;\r\n}\r\n","import './App.css';\nimport ConnectFour from './component/ConnectFour';\n\nfunction App() {\n  return (\n    <ConnectFour />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}