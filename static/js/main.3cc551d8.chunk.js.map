{"version":3,"sources":["component/logic.js","component/ConnectFour.js","App.js","reportWebVitals.js","index.js"],"names":["searches","prune","max","a","b","aiMove","grid","Promise","resolve","reject","isGameOver","console","log","v","moves","generateMoves","maxValue","Infinity","maxdepth","Math","round","length","col","best","m","addMove","negaMax","subMove","text","left","abs","depth","alpha","beta","color","result","player","checkFields","c","d","count","i","j","countThree","evaluate","value","move","pow","move_table","row","push","sort","winner","Cell","props","classname","className","Board","map","id","onClick","State","s","state","active","pnext","Menu","pNext","click","load","Log","show","ConnectFour","useState","createGrid","setGrid","setNext","gameState","setGame","gameActive","setActive","showLog","setShowLog","setLog","movecount","setCount","makeMove","g","p","gridCopy","slice","newGrid","r","setTimeout","then","name","content","random","handleClick","type","x","Array","fill","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3cc551d8.chunk.js","sourcesContent":["\r\n\r\nfunction max(a, b) {\r\n    return a > b ? a: b;\r\n}\r\n\r\nlet searches, prune;\r\nexport async function aiMove(grid) {\r\n    return new Promise(function(resolve, reject) {\r\n        if (isGameOver(grid) !== 0) {\r\n            console.log(\"finished grid.\");\r\n            return null;\r\n        }\r\n        searches = 0;\r\n        prune = 0;\r\n        let moves = generateMoves(grid); // possible moves array\r\n        let maxValue = -Infinity;\r\n        let v;\r\n        // maximum of 2000000 searches because moves m^depth = searches\r\n        let maxdepth = Math.round(Math.log(2000000) / Math.log(moves.length));\r\n\r\n        if (moves.length === 1) \r\n            resolve([moves[0].col, \" | no moves need to be analysed\"]); \r\n        else {\r\n            let best = moves[0];\r\n            // evaluate all moves and choose the best\r\n            for(let m of moves) {\r\n                addMove(grid, m, -1);\r\n                v = -negaMax(grid, maxdepth, -Infinity, Infinity, 1);\r\n                console.log(\"move: \" + m.col + \"value: \" + v);\r\n                if (v > maxValue) {\r\n                    best = m;\r\n                    maxValue = v;\r\n                }\r\n                subMove(grid, m, -1);\r\n            }\r\n\r\n            let text = \" | searchdepth: \" + maxdepth + \" | analysed moves: \" \r\n                        + searches + \" | 'skipped' moves: \" + prune;\r\n            \r\n            // win or loss is a mutliple of 1000. The higher the lesser moves to win/lose\r\n            let left = (maxdepth - Math.abs(maxValue /1000))/2\r\n            if (maxValue >= 1000) text += \" | win in \" + left + (left === 1 ? \" move\" : \" moves\");\r\n            else if (maxValue <= -1000) text += \" | loss in \" + left + (left === 1 ? \" move\" : \" moves\");\r\n\r\n            resolve([best.col, text]);\r\n        }\r\n    });\r\n}\r\n\r\n// alpha-beta-pruning with negaMax\r\nfunction negaMax(grid ,depth, alpha, beta, color) {\r\n    if (depth === 0 || isGameOver(grid)) {\r\n        return evaluate(grid, color, depth);\r\n    }\r\n\r\n    let moves = generateMoves(grid);\r\n    let value = -Infinity;\r\n    for (let move of moves) {\r\n        addMove(grid, move, color);\r\n        value = max(value, -negaMax(grid, depth-1, -beta, -alpha, -color))\r\n        alpha = max(alpha, value);\r\n        subMove(grid, move, color);\r\n\r\n        if (alpha >= beta) {\r\n            prune += (7-moves.length) * Math.pow(7, depth-1 >= 0 ? depth-1 : 0);\r\n            break; \r\n        }\r\n    }\r\n    return value;\r\n}\r\n\r\n\r\n\r\nfunction evaluate(grid, color, depth) {\r\n    searches += 1;\r\n    let result = isGameOver(grid);\r\n    if (isGameOver(grid) === color) {\r\n        return 1000*depth;\r\n    }\r\n    if (isGameOver(grid) === -color) {\r\n        return -1000*depth;\r\n    }\r\n\r\n    if (result === 2) {\r\n        return 0;\r\n    }    \r\n    return countThree(grid, color);\r\n}\r\n\r\n// returns occurrences of three cells and an empty cell in a row owned by player\r\nfunction countThree(grid, player) {\r\n    function checkFields(a, b, c, d) {\r\n         return ((player === a && a === b && b === c && d === null) ||\r\n            (player === a && a === b && c === null && b === d) ||\r\n            (player === a && b === null && a === c && c === d) ||\r\n            (null === a && a === b && b === c && d === player));\r\n    }\r\n\r\n    let count = 0;\r\n\r\n    // 0 = game running, 1 = p1 won, -1 = p2 won\r\n    // check rows\r\n    for (let i = 0; i < 4; i++) {\r\n        for (let j = 0; j < grid.length; j++) {\r\n            if (checkFields(grid[i][j], grid[i + 1][j], grid[i + 2][j], grid[i + 3][j])) count++;\r\n        }\r\n    }\r\n\r\n    // check columns\r\n    for (let i = 0; i < grid[0].length; i++) {\r\n        for (let j = 0; j < 3; j++) {\r\n            if (checkFields(grid[i][j], grid[i][j + 1], grid[i][j + 2], grid[i][j + 3])) count++;\r\n        }\r\n    }\r\n\r\n    // left top -> left bottom\r\n    for (let i = 0; i < 4; i++) {\r\n        for (let j = 0; j < 3; j++) {\r\n            if (checkFields(grid[i][j], grid[i + 1][j + 1], grid[i + 2][j + 2], grid[i + 3][j + 3])) count++;\r\n        }\r\n    }\r\n\r\n    // left top -> left bottom\r\n    for (let i = 3; i < 6; i++) {\r\n        for (let j = 0; j < 3; j++) {\r\n            if (checkFields(grid[i][j], grid[i - 1][j + 1], grid[i - 2][j + 2], grid[i - 3][j + 3])) count++;\r\n        }\r\n    }\r\n\r\n    return count;\r\n}\r\n\r\nconst move_table = \r\n    [3,4, 5, 7, 5,4,3,\r\n     4,6, 8,10, 8,6,4,\r\n     5,8,11,13,11,8,5,\r\n     5,8,11,13,11,8,5,\r\n     4,6, 8,10, 8,6,4,\r\n     3,4, 5, 7, 5,4,3];\r\nfunction generateMoves(grid) {\r\n\r\n    // generates a sorted array of all possible moves\r\n    let moves = [];\r\n    for (let col = 0; col < 7; col++) {\r\n        for (let row = 6 - 1; row >= 0; row--) {\r\n            if (!grid[col][row]) {\r\n                moves.push({ col, row });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    // sort moves by value of move_table\r\n    return moves.sort((a, b) => move_table[b.row*7 + b.col] - move_table[a.row * 7 + a.col]);\r\n}\r\n\r\nfunction addMove(grid, move, player) {\r\n    grid[move.col][move.row] = player;\r\n}\r\n\r\nfunction subMove(grid, move, player) {\r\n    grid[move.col][move.row] = null;\r\n}\r\n\r\nexport function isGameOver(grid) {\r\n\r\n    function checkFields(a, b, c, d) {\r\n        if (a && a === b && b === c && c === d) return a;\r\n        else return null;\r\n    }\r\n    // check rows\r\n    for (let j = 0; j < 6; j++) {\r\n        for (let i = 0; i < 4; i++) {\r\n        let winner = checkFields(grid[i][j], grid[i+1][j], grid[i+2][j], grid[i+3][j]);\r\n        if(winner) return winner;\r\n        }\r\n    }\r\n    //check columns\r\n    for (let i = 0; i < 7; i++) {\r\n        for (let j = 0; j < 3; j++) {\r\n        let winner = checkFields(grid[i][j], grid[i][j+1], grid[i][j+2], grid[i][j+3]);\r\n        if (winner) return winner;\r\n        }\r\n    }\r\n    //diagonals top left to bottom right\r\n    for (let i = 0; i < 4; i++) {\r\n        for (let j = 0; j < 3; j++) {\r\n        let winner = checkFields(grid[i][j], grid[i+1][j+1], grid[i+2][j+2], grid[i+3][j+3]);\r\n        if (winner) return winner;\r\n        }\r\n    }\r\n    //diagonals top right to bottom\r\n    for (let i = 3; i < 7; i++) {\r\n        for (let j = 0; j < 3; j++) {\r\n        let winner = checkFields(grid[i][j], grid[i-1][j+1], grid[i-2][j+2], grid[i-3][j+3]);\r\n        if (winner) return winner; \r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < 7; i++)\r\n        if(!grid[i][0]) return 0;\r\n    \r\n    return 2;\r\n}","import '../style/connectFour.css';\r\nimport { useState } from 'react';\r\nimport { aiMove , isGameOver} from './logic';\r\nimport MetaTags from 'react-meta-tags';\r\n\r\n// npm run deploy\r\n// npm start\r\n\r\nfunction Cell(props) {\r\n  let classname;\r\n  if (props.value === 1) classname = 'p1';\r\n  else if (props.value === -1) classname = 'p2';\r\n\r\n  return (\r\n      <div>\r\n        <div className={'cell'}><div className={classname}></div></div>\r\n      </div>\r\n        \r\n  )\r\n}\r\n\r\nfunction Board(props) {\r\n  return (\r\n      <div className={\"board\"}>\r\n          {props.grid.map((col, i) => \r\n              <div className={\"column-box\"} key ={\"col\" + i}>\r\n                <div key={i} id={`col-${i}`} className={\"col\"} >\r\n                    {col.map((value, j) => <Cell key={j} value={value}/>)}\r\n                </div>\r\n                <div key={i+\"rand\"} className={\"col-border\"} \r\n                  onClick={() => props.onClick(i)}\r\n                >\r\n                  {col.map((value, j) => <div key={j} className={\"cell-border\"}/>)}\r\n\r\n                </div>\r\n              </div>\r\n          )}\r\n      </div>\r\n  )\r\n}\r\n\r\nfunction State(props) {\r\n  let text ='';\r\n  const s = props.state\r\n  \r\n  if (s ===  1) text = 'you have won! this must be a bug...';\r\n  if (s === -1) text = 'the computer has won.';\r\n  if (s ===  2) text = 'the game is a draw.';\r\n  if (s ===  0 && props.active)  text = props.pnext ? 'your turn. click a column.' : 'the computer is thinking.';\r\n\r\n  return <p>{text}</p>\r\n}\r\n\r\nfunction Menu(props) {\r\n  const active = props.active;\r\n  const state = props.state;\r\n  const pnext = props.pNext;\r\n  const click = props.click;\r\n\r\n  let load = null;\r\n  if (active && state === 0 && !pnext)\r\n    load = <div className=\"load\"></div>;\r\n\r\n  return (<div className={\"menu\"}>\r\n              <button className=\"game-button\" onClick={click}>{active ? 'reset' : 'start game'}</button>\r\n              {load}\r\n              <State state={state} pnext ={pnext} active={active}/>\r\n          </div>)\r\n}\r\n\r\nfunction Log(props) {\r\n  if (props.show) {\r\n    return (<div className={\"log\"}>\r\n              <p>{props.log}</p>\r\n            </div>)\r\n  }\r\n  else return null;\r\n}\r\n\r\nexport default function ConnectFour(props) {\r\n    const [grid, setGrid] = useState( createGrid() );\r\n    const [pNext, setNext] = useState( true ); // is player Next\r\n    const [gameState, setGame] = useState(0); // 0 == not decided, 1 / -1 win for Player/Computer, 2 == draw\r\n    const [gameActive, setActive] = useState(false); // game \"activated\" by button?\r\n    const [showLog, setShowLog] = useState(false);\r\n    const [log, setLog] = useState('>');\r\n    const [movecount, setCount] = useState(1);\r\n\r\n    function makeMove(i, g, p) {\r\n      if (g[i][0] || isGameOver(g)) {\r\n        console.log(\"col full\");\r\n        return null;\r\n      }\r\n      let gridCopy = [];\r\n      for (let j = 0; j < g.length; j++)\r\n        gridCopy[j] = g[j].slice();\r\n\r\n\r\n      let row = 6;\r\n      for( let j = 0; j < 6; j++) {\r\n        if(gridCopy[i][j]) {\r\n          row = j;\r\n          break;\r\n        }\r\n      }\r\n      gridCopy[i][row-1] = p ? 1 : -1;\r\n      \r\n      setGame(isGameOver(gridCopy));\r\n      setGrid(gridCopy)\r\n      return gridCopy;\r\n    }\r\n\r\n    async function handleClick(i) {\r\n      if( gameActive && gameState === 0 && pNext) {\r\n        setNext(false);\r\n        let newGrid = makeMove(i, grid, true);\r\n        if (!newGrid) {\r\n          setNext(true);\r\n          return;\r\n        }\r\n        await new Promise(r => setTimeout(r, 550));\r\n        aiMove(newGrid).then(\r\n            result => {\r\n              //result[0] == the calculated move column, [1] == log text\r\n              makeMove(result[0], newGrid, false);\r\n              setLog(\"> move: \" + movecount + result[1]);\r\n              setCount(movecount + 1);\r\n              setNext(true);\r\n            }\r\n        )\r\n\r\n      }\r\n    }\r\n    \r\n    function handleLogClick() {\r\n      if (showLog) console.log(\"log deactivated\");\r\n      else console.log(\"log activated\");\r\n      setShowLog(!showLog);\r\n    }\r\n\r\n    function handleResetClick() {\r\n      \r\n      if (gameActive) {   \r\n        setGrid(createGrid());\r\n        setGame(0);\r\n        setActive(false);\r\n        setCount(0);\r\n        setLog('');\r\n      }\r\n      else {\r\n        setActive(true);\r\n        if (Math.random() < 0.5) {\r\n          setNext(true);\r\n        }\r\n        else {\r\n          setNext(false);\r\n          makeMove(3, createGrid(), false);\r\n          setLog(\"> move: 1 | no moves to analyze\");\r\n          setCount(2);\r\n          setNext(true);\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={\"connect-four\"}>\r\n          <MetaTags>\r\n            <title>Connect 4 AI</title>\r\n            <meta name=\"description\" content=\"Try to beat the computer in Connect Four!\" />\r\n          </MetaTags>\r\n          <div className={\"header\"}>\r\n            <h1>CONNECT FOUR AI</h1>\r\n            <h2>made by jannis becktepe and timon kobusch.</h2>\r\n          </div>\r\n         \r\n          <Menu\r\n            active ={gameActive}\r\n            state = {gameState}\r\n            pNext = {pNext}\r\n            click = {() => handleResetClick()}\r\n          />\r\n            \r\n          <Board \r\n              grid={grid}\r\n              onClick={i => handleClick(i)}\r\n          />\r\n          <div className={\"log-switch\"} >\r\n            <label className={\"switch\"}>\r\n              <input type=\"checkbox\" onClick={() => handleLogClick()}/>\r\n              <span className={\"slider round\"}></span>\r\n            </label>\r\n            <p>show stats</p>\r\n          </div>\r\n          <Log show={showLog} log={log}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction createGrid() {\r\n    let x = new Array(7);\r\n    for(let i = 0; i < x.length; i++) {\r\n      x[i] = new Array(6).fill(null);\r\n    }\r\n    return x;\r\n}","import './App.css';\r\nimport ConnectFour from './component/ConnectFour';\r\n\r\nfunction App() {\r\n  return (\r\n    <ConnectFour />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}