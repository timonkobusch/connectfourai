{"version":3,"sources":["component/ConnectFour.js","App.js","reportWebVitals.js","index.js"],"names":["min","a","b","addStone","g","i","p","row","j","minimax","depth","maxPlayer","value","res","gameOver","moves","elt","aiMove","pgrid","length","slice","Cell","props","classname","className","Board","grid","map","col","id","onClick","ConnectFour","useState","createGrid","setGrid","pNext","setNext","gameState","setGame","gameActive","setActive","makeMove","gridCopy","console","log","e","preventDefault","Math","random","nGrid","handleClick","x","Array","fill","checkFields","c","d","winner","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e2cb81c9.chunk.js","sourcesContent":["import '../style/connectFour.css';\r\nimport { useState } from 'react';\r\n// npm run deploy\r\n// npm start\r\nfunction evaluate() {\r\n\r\n}\r\nfunction max(a, b) {\r\n  return a>b ? a : b;\r\n}\r\n\r\nfunction min(a,b) {\r\n  return a<b ? a: b;\r\n}\r\n\r\nfunction addStone(g, i, p) {\r\n  let row = 6;\r\n  for( let j = 0; j < 6; j++) {\r\n    if(g[i][j]) {\r\n      row = j;\r\n      break;\r\n    }\r\n  }\r\n  g[i][row-1] = p ? 1 : -1;\r\n  return g;\r\n}\r\n\r\nfunction minimax(g, depth, maxPlayer) {\r\n  if (depth === 0) return evaluate();\r\n  let res = gameOver(g);\r\n  if (res !== 0) return res*10000;\r\n  let value;\r\n  let moves = [1,2,3,4,5];\r\n  if (maxPlayer) {\r\n    value = -99999;\r\n    for (let elt of moves) {\r\n      value = max(value, minimax(addStone(g, elt, true), depth -1, false));\r\n    }\r\n    return value;\r\n  } \r\n  else {\r\n    value = 99999;\r\n    for(let elt of moves) {\r\n      value = min(value, minimax(addStone(g, elt, false), depth -1, true));\r\n    }\r\n    return value;\r\n  }\r\n\r\n\r\n}\r\n\r\nfunction aiMove(pgrid) {\r\n  let g = [];\r\n\r\n  for (let j = 0; j < pgrid.length; j++)\r\n     g[j] = pgrid[j].slice();\r\n\r\n  let move = minimax(g, 5, true);\r\n  \r\n  \r\n  return 1;\r\n}\r\n\r\nfunction Cell(props) {\r\n  let classname;\r\n  if (props.value === 1) classname = 'p1';\r\n  else if (props.value === -1) classname = 'p2';\r\n\r\n  return (\r\n      <div>\r\n        <div className={'cell'}><div className={classname}></div>\r\n      </div></div>\r\n        \r\n  )\r\n}\r\n\r\nfunction Board(props) {\r\n  return (\r\n      <div className={\"board\"}>\r\n          {props.grid.map((col, i) => \r\n              <div className={\"column-box\"}>\r\n                <div key={i} id={`col-${i}`} className={\"col\"} >\r\n                    {col.map((value, j) => <Cell key={j} value={value}/>)}\r\n                </div>\r\n                <div key={i+\"rand\"} className={\"col-border\"} \r\n                  onClick={() => props.onClick(i)}\r\n                >\r\n                  {col.map((value, j) => <div key={j} className={\"cell-border\"}/>)}\r\n\r\n                </div>\r\n              </div>\r\n          )}\r\n      </div>\r\n  )\r\n}\r\n\r\n\r\nexport default function ConnectFour(props) {\r\n    const [grid, setGrid] = useState( createGrid() );\r\n    const [pNext, setNext] = useState( true );\r\n    const [gameState, setGame] = useState(0);\r\n    const [gameActive, setActive] = useState(false);\r\n\r\n    function makeMove(i, g, p) {\r\n      if (g[i][0] || gameOver(g)) {\r\n        console.log(\"col full\");\r\n        \r\n        return;\r\n      }\r\n      let gridCopy = [];\r\n      for (let j = 0; j < g.length; j++)\r\n        gridCopy[j] = g[j].slice();\r\n\r\n\r\n      let row = 6;\r\n      for( let j = 0; j < 6; j++) {\r\n        if(gridCopy[i][j]) {\r\n          row = j;\r\n          break;\r\n        }\r\n      }\r\n      gridCopy[i][row-1] = p ? 1 : -1;\r\n      \r\n      console.log(\"move at\" + i + row);\r\n      setGrid(gridCopy);\r\n      setGame(gameOver(gridCopy));\r\n      return gridCopy;\r\n    }\r\n\r\n    function handleClick(i) {\r\n      if( gameActive && gameState === 0 && pNext) {\r\n        setNext(false);\r\n        let nGrid = makeMove(i, grid, true);\r\n        let move = aiMove(nGrid);\r\n        makeMove(move, nGrid, false);\r\n        setNext(true);\r\n\r\n      }\r\n    }\r\n    \r\n    function handleResetClick(e) {\r\n      \r\n      e.preventDefault();\r\n      if (gameActive) {   \r\n        setGrid(createGrid());\r\n        setGame(0);\r\n        setActive(false);\r\n      }\r\n      else {\r\n        setActive(true);\r\n        if (Math.random() < 0.5) {\r\n          setNext(true);\r\n        }\r\n        else {\r\n          setNext(false);\r\n          let move = aiMove(createGrid());\r\n          makeMove(move, createGrid(), false);\r\n          setNext(true);\r\n        }\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className={\"background\"}>\r\n        <div className={\"connect-four\"}>\r\n          <div className={\"header\"}>\r\n            <h1>CONNECT FOUR AI</h1>\r\n            <h2>made by jannis becketepe and timon kobusch.</h2>\r\n          </div>\r\n          <div className={\"menu\"}>\r\n            <button className=\"game-button\" onClick={handleResetClick}>{gameActive ? 'reset' : 'start game'}</button>\r\n            <p>{gameActive && gameState === 0 ? pNext ? 'your turn. click a column.' : 'the computer is thinking.' : ''}</p>\r\n            <p>{gameState === 1 ? 'You won' : gameState === -1 ? 'the computer won.' : ''}</p>\r\n          </div>\r\n          <Board \r\n              grid={grid}\r\n              onClick={i => handleClick(i)}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nfunction createGrid() {\r\n    let x = new Array(7);\r\n    for(let i = 0; i < x.length; i++) {\r\n      x[i] = new Array(6).fill(null);\r\n    }\r\n    return x;\r\n}\r\n\r\nfunction checkFields(a, b, c, d) {\r\n  if (a && a === b && b === c && c === d) {\r\n    return a;\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction gameOver(grid) {\r\n  // check rows\r\n  for (let j = 0; j < 6; j++) {\r\n    for (let i = 0; i < 4; i++) {\r\n      let winner = checkFields(grid[i][j], grid[i+1][j], grid[i+2][j], grid[i+3][j]);\r\n      if(winner) return winner;\r\n    }\r\n  }\r\n\r\n  //check columns\r\n  for (let i = 0; i < 7; i++) {\r\n    for (let j = 0; j < 3; j++) {\r\n      let winner = checkFields(grid[i][j], grid[i][j+1], grid[i][j+2], grid[i][j+3]);\r\n      if (winner) return winner;\r\n    }\r\n  }\r\n\r\n  //diagonals top left to bottom right\r\n  for (let i = 0; i < 4; i++) {\r\n    for (let j = 0; j < 3; j++) {\r\n      let winner = checkFields(grid[i][j], grid[i+1][j+1], grid[i+2][j+2], grid[i+3][j+3]);\r\n      if (winner) return winner;\r\n    }\r\n  }\r\n\r\n  //diagonals top right to bottom\r\n  for (let i = 3; i < 7; i++) {\r\n    for (let j = 0; j < 3; j++) {\r\n      let winner = checkFields(grid[i][j], grid[i-1][j+1], grid[i-2][j+2], grid[i-3][j+3]);\r\n      if (winner) return winner; \r\n    }\r\n  }\r\n  return 0;\r\n}\r\n","import './App.css';\nimport ConnectFour from './component/ConnectFour';\n\nfunction App() {\n  return (\n    <ConnectFour />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}