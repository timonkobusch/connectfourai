{"version":3,"sources":["component/logic.js","component/ConnectFour.js","App.js","reportWebVitals.js","index.js"],"names":["max","a","b","aiMove","grid","Promise","resolve","reject","isGameOver","best","v","moves","generateMoves","maxValue","Infinity","maxdepth","Math","round","log","length","console","m","addMove","negaMax","subMove","col","depth","alpha","beta","color","player","checkFields","c","d","count","i","j","countThree","evaluate","value","move","move_table","row","push","sort","error","draw","winner","Cell","props","classname","className","Board","map","id","onClick","ConnectFour","useState","createGrid","setGrid","pNext","setNext","gameState","setGame","gameActive","setActive","makeMove","g","p","gridCopy","slice","nGrid","r","setTimeout","then","result","e","preventDefault","random","handleClick","type","x","Array","fill","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dd458223.chunk.js","sourcesContent":["\n\nfunction max(a, b) {\n    return a > b ? a: b;\n}\n\nexport async function aiMove(grid) {\n    return new Promise(function(resolve, reject) {\n        if (isGameOver(grid) !== 0) return 0;\n        let moves = generateMoves(grid);\n        let maxValue = -Infinity;\n        let best, v;\n        \n        // maximum of 1000000 searches becaus moves m^depth = searches\n        let maxdepth = Math.round(Math.log(1000000) / Math.log(moves.length));\n\n        console.log(\"maxdepth = \"+ maxdepth + \"moves: \" + moves.length);\n        for(let m of moves) {\n            addMove(grid, m, -1);\n            v = -negaMax(grid, maxdepth, -Infinity, Infinity, 1);\n            if (v > maxValue) {\n                best = m;\n                maxValue = v;\n            }\n            subMove(grid, m, -1);\n        }\n        resolve(best.col);\n    });\n}\n\n// alpha-beta-pruning with negaMax\nfunction negaMax(grid ,depth, alpha, beta, color) {\n    if (depth === 0 || isGameOver(grid))\n        return evaluate(grid, color, depth);\n\n    let moves = generateMoves(grid);\n    let value = -Infinity;\n    for (let move of moves) {\n        addMove(grid, move, color);\n        value = max(value, -negaMax(grid, depth-1, -beta, -alpha, -color))\n        alpha = max(alpha, value);\n        subMove(grid, move, color);\n\n        if (alpha >= beta) break;\n    }\n    return value;\n}\n\n\n\nfunction evaluate(grid, color, depth) {\n    if (isGameOver(grid) === color) return depth*1000;\n    else if (isGameOver(grid) === -color) return -1000*depth;\n\n    return countThree(grid, color);\n}\n\n// returns occurrences of three cells and an empty cell in a row owned by player\nfunction countThree(grid, player) {\n    function checkFields(a, b, c, d) {\n        if ((player === a && a === b && b === c && d === null) ||\n            (player === a && a === b && c === null && b === d) ||\n            (player === a && b === null && a === c && c === d) ||\n            (null === a && a === b && b === c && d === player)) return true\n        else return false;\n    }\n\n    let count = 0;\n\n    // 0 = game running, 1 = p1 won, -1 = p2 won\n    // check rows\n    for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < grid.length; j++) {\n            if (checkFields(grid[i][j], grid[i + 1][j], grid[i + 2][j], grid[i + 3][j])) count++;\n        }\n    }\n\n    // check columns\n    for (let i = 0; i < grid[0].length; i++) {\n        for (let j = 0; j < 3; j++) {\n            if (checkFields(grid[i][j], grid[i][j + 1], grid[i][j + 2], grid[i][j + 3])) count++;\n        }\n    }\n\n    // left top -> left bottom\n    for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < 3; j++) {\n            if (checkFields(grid[i][j], grid[i + 1][j + 1], grid[i + 2][j + 2], grid[i + 3][j + 3])) count++;\n        }\n    }\n\n    // left top -> left bottom\n    for (let i = 3; i < 6; i++) {\n        for (let j = 0; j < 3; j++) {\n            if (checkFields(grid[i][j], grid[i - 1][j + 1], grid[i - 2][j + 2], grid[i - 3][j + 3])) count++;\n        }\n    }\n\n    return count;\n}\n\nconst move_table = \n    [3,4, 5, 7, 5,4,3,\n     4,6, 8,10, 8,6,4,\n     5,8,11,13,11,8,5,\n     5,8,11,13,11,8,5,\n     4,6, 8,10, 8,6,4,\n     3,4, 5, 7, 5,4,3,];\nfunction generateMoves(grid) {\n    let moves = [];\n    for (let col = 0; col < 7; col++) {\n        for (let row = 6 - 1; row >= 0; row--) {\n            if (!grid[col][row]) {\n                moves.push({ col, row });\n                break;\n            }\n        }\n    }\n    // sort moves by distance to the middle column\n    return moves.sort((a, b) => move_table[b.row*7 + b.col] - move_table[a.row * 7 + a.col]);\n}\n\nfunction addMove(grid, move, player) {\n    if (grid[move.col][move.row]) console.error(\"Invalid move: \" + move.col + \" \" + move.row);\n    grid[move.col][move.row] = player;\n}\n\nfunction subMove(grid, move, player) {\n    if (grid[move.col][move.row] !== player) console.error(\"Invalid revert: \" + move.col + \" \" + move.row);\n    grid[move.col][move.row] = null;\n}\n\nexport function isGameOver(grid) {\n    let draw = true;\n    for (let i = 0; i < 7; i++)\n        if(!grid[i][0]) draw = false;\n\n    function checkFields(a, b, c, d) {\n        if (a && a === b && b === c && c === d) return a;\n        else return null;\n    }\n\n    // check rows\n    for (let j = 0; j < 6; j++) {\n        for (let i = 0; i < 4; i++) {\n        let winner = checkFields(grid[i][j], grid[i+1][j], grid[i+2][j], grid[i+3][j]);\n        if(winner) return winner;\n        }\n    }\n\n    //check columns\n    for (let i = 0; i < 7; i++) {\n        for (let j = 0; j < 3; j++) {\n        let winner = checkFields(grid[i][j], grid[i][j+1], grid[i][j+2], grid[i][j+3]);\n        if (winner) return winner;\n        }\n    }\n\n    //diagonals top left to bottom right\n    for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < 3; j++) {\n        let winner = checkFields(grid[i][j], grid[i+1][j+1], grid[i+2][j+2], grid[i+3][j+3]);\n        if (winner) return winner;\n        }\n    }\n\n    //diagonals top right to bottom\n    for (let i = 3; i < 7; i++) {\n        for (let j = 0; j < 3; j++) {\n        let winner = checkFields(grid[i][j], grid[i-1][j+1], grid[i-2][j+2], grid[i-3][j+3]);\n        if (winner) return winner; \n        }\n    }\n    return draw ? 2 : 0;\n}","import '../style/connectFour.css';\r\nimport { useState } from 'react';\r\nimport { aiMove , isGameOver} from './logic';\r\n\r\n// npm run deploy\r\n// npm start\r\n\r\nfunction Cell(props) {\r\n  let classname;\r\n  if (props.value === 1) classname = 'p1';\r\n  else if (props.value === -1) classname = 'p2';\r\n\r\n  return (\r\n      <div>\r\n        <div className={'cell'}><div className={classname}></div>\r\n      </div></div>\r\n        \r\n  )\r\n}\r\n\r\nfunction Board(props) {\r\n  return (\r\n      <div className={\"board\"}>\r\n          {props.grid.map((col, i) => \r\n              <div className={\"column-box\"} key ={\"col\" + i}>\r\n                <div key={i} id={`col-${i}`} className={\"col\"} >\r\n                    {col.map((value, j) => <Cell key={j} value={value}/>)}\r\n                </div>\r\n                <div key={i+\"rand\"} className={\"col-border\"} \r\n                  onClick={() => props.onClick(i)}\r\n                >\r\n                  {col.map((value, j) => <div key={j} className={\"cell-border\"}/>)}\r\n\r\n                </div>\r\n              </div>\r\n          )}\r\n      </div>\r\n  )\r\n}\r\n\r\n\r\nexport default function ConnectFour(props) {\r\n    const [grid, setGrid] = useState( createGrid() );\r\n    const [pNext, setNext] = useState( true );\r\n    const [gameState, setGame] = useState(0);\r\n    const [gameActive, setActive] = useState(false);\r\n\r\n    function makeMove(i, g, p) {\r\n      if (g[i][0] || isGameOver(g)) {\r\n        console.log(\"col full\");\r\n        \r\n        return null;\r\n      }\r\n      let gridCopy = [];\r\n      for (let j = 0; j < g.length; j++)\r\n        gridCopy[j] = g[j].slice();\r\n\r\n\r\n      let row = 6;\r\n      for( let j = 0; j < 6; j++) {\r\n        if(gridCopy[i][j]) {\r\n          row = j;\r\n          break;\r\n        }\r\n      }\r\n      gridCopy[i][row-1] = p ? 1 : -1;\r\n      \r\n      setGame(isGameOver(gridCopy));\r\n      setGrid(gridCopy)\r\n      return gridCopy;\r\n    }\r\n\r\n    async function handleClick(i) {\r\n      if( gameActive && gameState === 0 && pNext) {\r\n        setNext(false);\r\n        let nGrid = makeMove(i, grid, true);\r\n        if (!nGrid) {\r\n          setNext(true);\r\n          return;\r\n        }\r\n        //let gridCopy = [];\r\n        //for (let j = 0; j < nGrid.length; j++)\r\n        //  gridCopy[j] = nGrid[j].slice();\r\n        await new Promise(r => setTimeout(r, 550));\r\n        aiMove(nGrid).then(\r\n            result => {\r\n              makeMove(result, nGrid, false);\r\n              setNext(true);\r\n            }\r\n        )\r\n\r\n      }\r\n    }\r\n    \r\n    function handleResetClick(e) {\r\n      \r\n      e.preventDefault();\r\n      if (gameActive) {   \r\n        setGrid(createGrid());\r\n        setGame(0);\r\n        setActive(false);\r\n      }\r\n      else {\r\n        setActive(true);\r\n        if (Math.random() < 0.5) {\r\n          setNext(true);\r\n        }\r\n        else {\r\n          setNext(false);\r\n          makeMove(3, createGrid(), false);\r\n          setNext(true);\r\n        }\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className={\"background\"}>\r\n        <div className={\"connect-four\"}>\r\n          <div className={\"header\"}>\r\n            <h1>CONNECT FOUR AI</h1>\r\n            <h2>made by jannis becketepe and timon kobusch.</h2>\r\n          </div>\r\n          <div className={\"menu\"}>\r\n            <button className=\"game-button\" onClick={handleResetClick}>{gameActive ? 'reset' : 'start game'}</button>\r\n            {gameActive && gameState===0 && !pNext && <div className=\"load\"></div>}\r\n            <p>{gameActive && gameState === 0 ? pNext ? 'your turn. click a column.' : 'the computer is thinking.' : ''}</p>\r\n            <p>{gameState === 1 ? 'you won!' : gameState === -1 ? 'the computer won.' : ''}</p>\r\n          </div>\r\n          <Board \r\n              grid={grid}\r\n              onClick={i => handleClick(i)}\r\n          />\r\n          <div className={\"log-switch\"}>\r\n            <label className={\"switch\"}>\r\n              <input type=\"checkbox\"/>\r\n              <span className={\"slider round\"}></span>\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nfunction createGrid() {\r\n    let x = new Array(7);\r\n    for(let i = 0; i < x.length; i++) {\r\n      x[i] = new Array(6).fill(null);\r\n    }\r\n    return x;\r\n}\r\n\r\nfunction checkFields(a, b, c, d) {\r\n  if (a && a === b && b === c && c === d) {\r\n    return a;\r\n  }\r\n  return null;\r\n}\r\n","import './App.css';\nimport ConnectFour from './component/ConnectFour';\n\nfunction App() {\n  return (\n    <ConnectFour />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}